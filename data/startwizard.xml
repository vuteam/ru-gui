<wizard>
	<step id="start" nextstep="introduction">
		<text value="Welcome.\n\nThis start wizard will guide you through the basic setup of your media center.\nPress the OK button on your remote control to move to the next step." />
		<code>
self.clearSelectedKeys()
self.selectKey("OK")
		</code>
	</step>

	<step id="introduction" >
		<text value="Use the up/down keys on your remote control to select an option. After that, press OK." />
		<list>
			<listentry caption="Use wizard to set up basic features" step="nima" />
			<listentry caption="Exit wizard" step="end" />
		</list>
		<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
		</code>
	</step>

	<step id="nima">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty and config.misc.startwizard.shownimconfig.value
		</condition>
		<text value="Use the left and right buttons to change an option.\n\nPlease set up tuner A" />
		<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
		</code>
	</step>

	<step id="nimb">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty and config.misc.startwizard.shownimconfig.value
		</condition>
		<text value="Please set up tuner B" />
		<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
		</code>
	</step>

	<step id="nimc">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and config.misc.startwizard.shownimconfig.value
		</condition>
		<text value="Please set up tuner C" />
		<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
		</code>
	</step>

	<step id="nimd">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and config.misc.startwizard.shownimconfig.value
		</condition>
		<text value="Please set up tuner D" />
		<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
		</code>
	</step>

	<step id="scanquestion">
		<text value="Do you want to do a service scan?" />
		<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
		</condition>
		<code>
self.hideRc()
self["red"].hide()
self["languagetext"].hide()
		</code>
		<list>
			<listentry caption="Yes, do an automatic scan now" step="scan" />
			<listentry caption="Yes, do a manual scan now" step="manualscan" />
			<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
		</list>
	</step>

	<step id="scan" nextstep="finisheddefaultsatlists">
		<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
		</condition>
		<text value="What do you want to scan?" />
		<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
	</step>

	<step id="manualscan">
		<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
		</condition>
		<text value="What do you want to scan?" />
		<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
	</step>

	<step id="nextscan">
		<condition>
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
		</condition>
		<text value="Do you want to do another manual service scan?" />
		<list>
			<listentry caption="Yes, do another manual scan now" step="manualscan" />
			<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
		</list>
	</step>
	<step id="finisheddefaultsatlists">
		<text value="Do you want to enable the parental control feature on your media center?" />
		<list>
			<listentry caption="Yes" step="parentalsetup" />
			<listentry caption="No" step="end" />
		</list>
		<code pos="after">
if self["list"].index == 0:
	config.ParentalControl.configured.value = True
else:
	config.ParentalControl.configured.value = False
config.ParentalControl.configured.save()
		</code>
	</step>

	<step id="parentalsetup">
		<text value="You need to set a PIN code and hide it from your children.\n\nDo you want to set the pin now?" />
		<list>
			<listentry caption="Yes" step="finishparentalsetup" />
			<listentry caption="No" step="warnpin" />
		</list>
		<code pos="after">
from ParentalControlSetup import ParentalControlChangePin
if self["list"].index == 0:
	self.session.open(ParentalControlChangePin, config.ParentalControl.servicepin[0], _("parental control pin"))
			</code>
		</step>
		<step id="warnpin">
			<text value="Please be aware, that anyone can disable the parental control, if you have not set a PIN." />
		</step>
		<step id="finishparentalsetup">
		<code>
if config.ParentalControl.setuppin.value == "aaaa":
	config.ParentalControl.setuppinactive.value = False
else:
	config.ParentalControl.setuppinactive.value = True
config.ParentalControl.setuppinactive.save()
config.ParentalControl.servicepinactive.value = True
config.ParentalControl.servicepinactive.save()
config.ParentalControl.setuppin.value = config.ParentalControl.servicepin[0].value
config.ParentalControl.setuppin.save()
		</code>
		<text value="After the start wizard is completed, you need to protect single services. Refer to your media center manual on how to do that." />
	</step>

	<step id="end" timeout="10" timeoutaction="changestep" step="quit" >
<!-- TRANSLATORS: Do not put the template element [timeout] -->
		<text value="The wizard is finished now. Please click OK to continue, or it happens automatically after [timeout] seconds." />
	</step>

	<step id="quit" laststep="true">
		<condition>
self.condition = self.isLastWizard
		</condition>
	</step>
</wizard>
